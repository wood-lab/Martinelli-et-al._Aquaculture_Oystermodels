geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA),plot.margin=unit(c(0,0,0,0),"cm"))+
scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("#FED976","#7FCDBB"))+
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA),plot.margin=unit(c(0,0,0,0),"cm"))+
scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("#7FCDBB","#F03B20"))+
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA),plot.margin=unit(c(0,0,0,0),"cm"))+
scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("#7FCDBB","#F03B20"))+
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA),plot.margin=unit(c(0,0,0,0),"cm"))+
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("#7FCDBB","#F03B20"))+
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("#7FCDBB","orange"))+ #F03B20
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","orange"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","green"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=rev(levels(allstates$x)),labels=c("fresh","frozen"))
#theme(legend.position="none")
allstates_plot
allstates$x
allstates$inv.log(x)
allstates$inv.logit(x)
library(boot)
allstates$inv.logit(x)
library(boot)
allstates$inv.logit(x)
inv.logit(allstates$x)
inv.logit(allstates$x)*100
inv.logit(allstates$x)*10
prevalence$y
rescale(allstates$x, from = range(prevalence$y, na.rm = TRUE, finite = TRUE))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
scale_x_discrete(limits=rev(levels(prevalence$y)))
#theme(legend.position="none")
allstates_plot
allstates$x
y_reversed <- scale(prevalence$y_sc,center=FALSE,scale=1/attr(prevalence$y_sc,'scaled:scale'))
y_reversed <- scale(y_reversed,center=-attr(prevalence$y_sc,'scaled:center'),scale=FALSE)
y_reversed
head(y_reversed)
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
scale_x_discrete(limits=y_reversed, labels=c()))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
scale_x_discrete(limits=y_reversed)
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
scale_x_continuous(limits=y_reversed)
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
scale_x_discrete(limits=factor(y_reversed))
allstates_plot
y_reversed <- scale(allstates$x,center=FALSE,scale=1/attr(allstates$x,'scaled:scale'))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))+
#scale_x_discrete(limits=factor(y_reversed))
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=factor(y_reversed))
allstates_plot
rescale(allstates$x, from = range(prevalence$y, na.rm = TRUE, finite = TRUE))
attributes(prevalence$y_sc)
prevalence$y_sc * attr(prevalence$y_sc, 'scaled:scale') + attr(prevalence$y_sc, 'scaled:center')
y_reversed <- prevalence$y_sc * attr(prevalence$y_sc, 'scaled:scale') + attr(prevalence$y_sc, 'scaled:center')
dim(y_reversed)
class(y_reversed)
#using the attributes to unscale & plot right values on x axis
y_reversed <- allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
y_reversed
#using the attributes to unscale & plot right values on x axis
y_reversed <- allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
y_reversed
allstates$x
allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
(allstates$x * attr(allstates$x, 'scaled:scale')) + attr(allstates$x, 'scaled:center')
#using the attributes to unscale & plot right values on x axis
y_reversed <- (allstates$x * attr(allstates$x, 'scaled:scale')) + attr(allstates$x, 'scaled:center')
y_reversed
attributes(allstates$x, 'scaled:scale')
allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
allstates$x
class(allstates$x)
as.array(allstates$x)
#using the attributes to unscale & plot right values on x axis
allstates$x <- as.array(allstates$x)
y_reversed <- (allstates$x * attributes(allstates$x, 'scaled:scale')) + attributes(allstates$x, 'scaled:center')
allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
#using the attributes to unscale & plot right values on x axis
allstates$x <- as.data.frame(allstates$x)
allstates$x
y_reversed <- (allstates$x * attributes(allstates$x, 'scaled:scale')) + attributes(allstates$x, 'scaled:center')
allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
allstates$x * attr(allstates$x, 'scaled:scale') + attr(allstates$x, 'scaled:center')
#using the attributes to unscale & plot right values on x axis
scaled_y <- as.data.frame(allstates$x)
scaled_y
y_reversed <- (scaled_y * attributes(scaled_y, 'scaled:scale')) + attributes(scaled_y, 'scaled:center')
y_reversed
y_reversed <- (scaled_y * attr(scaled_y, 'scaled:scale')) + attr(scaled_y, 'scaled:center')
y_reversed
model2 <- glmer(Infested ~ y_sc + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
###########################################################
## ADDING PREVALENCE DATASET
###########################################################
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
########################
# CHECKING FOR CORRELATION IN oyster metrics
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
#### CREATING SEASON
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
#### SCALING each column individually
###########################################################
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y_sc + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
model2 <- glmer(Infested ~ y + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
## trying out a plot
allstates <- ggpredict(model1,c("y","Season"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=factor(y_reversed))
allstates_plot
head(fulldata$y)
head(prevalence$y)
range(prevalence$y)
range(prevalence$y, na.rm=TRUE)
##########################################################
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
###########################################################
## ADDING PREVALENCE DATASET
###########################################################
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y_sc + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
## trying out a plot
allstates <- ggpredict(model1,c("y_sc","Season"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=factor(y_reversed))
allstates_plot
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
# dim: 4085, 19
########################
# CHECKING FOR CORRELATION IN oyster metrics
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
#### CREATING SEASON
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
#### SCALING each column individually
###########################################################
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y_sc + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
anova(model1)
vif(model1)
## trying out a plot
allstates <- ggpredict(model1,c("y_sc","Season"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group)+
scale_color_manual(values=c("blue","turquoise"))+ #F03B20 #7FCDBB
geom_point(size=4)+
geom_errorbar(data=allstates,mapping=aes(x=x,ymin=conf.low,ymax=conf.high),width=0.03)+
geom_line(aes(group=group))+
xlab("Shell height")+
ylab(expression(paste("Predicted infestation")))+
theme_classic()+
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"),axis.text.y=element_text(size=14),axis.title.y=element_text(size=14),axis.text.x=element_text(size=14),axis.title.x=element_text(size=14),panel.background=element_rect(fill="white",color="black"),panel.grid.major=element_line(color="grey90"),panel.grid.minor=element_line(color=NA))
#scale_x_discrete(limits=factor(y_reversed))
allstates_plot
min(prevalence$y)
min(prevalence$y, na.rm=T)
max(prevalence$y, na.rm=T)
###########################################################
## ADDING PREVALENCE DATASET
###########################################################
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
min(prevalence$y, na.rm=T)
max(prevalence$y, na.rm=T)
###########################################################
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
# dim: 4085, 19
########################
# CHECKING FOR CORRELATION IN oyster metrics
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
#### CREATING SEASON
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
#### SCALING each column individually
###########################################################
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
min(prevalence$y, na.rm=T)
max(prevalence$y, na.rm=T)
