theme_classic()
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, color="aqua",add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
geom_point(size=4) +
theme_classic()+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=c("steelblue3","tomato2")) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
#panel.background=element_rect(fill="white",color="black"), panel.grid.major=element_line(color="grey90"),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates_plot2 <- plot(allstates2, facet=TRUE, color="aqua",add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
geom_point(size=4) +
theme_classic() +
theme(plot.title=element_blank())
allstates_plot2
allstates_plot<-ggplot(allstates,aes(x, predicted, color="aqua",), color=group) +
#scale_color_manual(values=c("steelblue3","tomato2")) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates_plot<-ggplot(allstates,aes(x, predicted, color="aqua",), color="aqua") +
#scale_color_manual(values=c("steelblue3","tomato2")) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=c("steelblue3","tomato2")) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
## PLOTTING MODEL 2
########################
summary(model2)
allstates2 <- ggpredict(model2,c("Culture","State"))
allstates_plot2 <- plot(allstates2, facet=TRUE, color="aqua", add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
geom_point(size=4) +
theme_classic() +
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, color="aqua", add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
geom_point(size=4) +
theme_classic() +
ylim(0,1)
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, color="aqua", add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
geom_boxplot(size=4) +
theme_classic() +
ylim(0,1)
theme(plot.title=element_blank())
allstates_plot2
library(wesanderson)
install.packages("wesanderson")
library(wesanderson)
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest"))
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest"))
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest")) +
geom_point(size=4) +
theme_classic() +
ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest1")) +
geom_point(size=4) +
theme_classic() +
ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest2")) +
geom_point(size=4) +
theme_classic() +
ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest2")) +
geom_point(size=4) +
theme_classic() +
#ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05, color=group) +
ylab(expression(paste("Predicted infestation"))) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest1")) +
geom_point(size=4) +
theme_classic() +
#ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest1")) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
#ylim(0,1)+
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot2 + scale_fill_manual(values=wes_palette(n=4, name="GrandBudapest1"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=values = wes_palette("GrandBudapest1", n = 2)) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot +  scale_color_manual(values=wes_palette("GrandBudapest1", n = 2)) +
## PLOTTING MODEL 2
########################
summary(model2)
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 2)) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.05) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot2
allstates_plot3 <- plot(allstates2, add.data=TRUE, jitter=0.05) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot3
allstates_plot3 <- plot(allstates2, add.data=TRUE, jitter=0.05) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
#geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot3
allstates_plot3 <- plot(allstates2) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot3
allstates_plot2 <- plot(allstates2, facet=TRUE, add.data=TRUE, jitter=0.1) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot2
allstates_plot2 <- plot(allstates2, facet=TRUE) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot2
allstates_plot
allstates_plot2
allstates_plot3
summary(model2)
allstates_plot3 <- plot(allstates3, facet=TRUE) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates3 <- ggpredict(model2,c("Season","State"))
allstates_plot3 <- plot(allstates3, facet=TRUE) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot3
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
###########################################################
## ADDING PREVALENCE DATASET
###########################################################
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
model2 <- glmer(Infested ~ y_sc + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
anova(model2)
## PLOTTING MODEL 1
########################
allstates <- ggpredict(model1,c("y","Season"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 2)) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
library(wesanderson)
library(wesanderson)
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 2)) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
allstates2 <- ggpredict(model2,c("Culture","State"))
allstates_plot2 <- plot(allstates2, facet=TRUE) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot2
allstates3 <- ggpredict(model2,c("Season","State"))
allstates_plot3 <- plot(allstates3, facet=TRUE) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 4)) +
geom_point(size=4) +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
ylim(0,1) +
theme(plot.title=element_blank())
allstates_plot3
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
library(wesanderson)
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
# dim: 4085, 19
########################
# CHECKING FOR CORRELATION IN oyster metrics
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
#### CREATING SEASON
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
#### SCALING each column individually
###########################################################
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
anova(model1)
vif(model1)
model2 <- glmer(Infested ~ y_sc + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
anova(model2)
vif(model2)
## PLOTTING MODEL 1
########################
allstates <- ggpredict(model1,c("y","Season"))
allstates_plot<-ggplot(allstates,aes(x,predicted,color=group), color=group) +
scale_color_manual(values=wes_palette("GrandBudapest1", n = 2)) +
geom_point(size=4) +
geom_errorbar(data=allstates, mapping=aes(x=x, ymin=conf.low, ymax=conf.high), width=0.03) +
geom_line(aes(group=group)) +
xlab("Shell height (cm)") +
ylab(expression(paste("Predicted infestation"))) +
theme_classic() +
guides(color=guide_legend("Season")) +
theme(plot.title=element_text(size=14,hjust=0.5,face="plain"), axis.text.y=element_text(size=14),
axis.title.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title.x=element_text(size=14),
panel.grid.minor=element_line(color=NA))
allstates_plot
summary(model1)
model2 <- glmer(Infested ~ y_sc + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
anova(model2)
getwd()
library(plyr)
library(tidyverse)
library(corrplot)
library(zoo)
library(lme4)
library(car)
library(lubridate)
library(devtools)
library(ggeffects)
library(statmod)
library(wesanderson)
###########################################################
## ADDING PREVALENCE DATASET
###########################################################
prevalence <- read.table("master_spreadsheet_all.csv", header=T,sep=",")
prevalence <- subset(prevalence, prevalence$Valve =='R') # only keep R valves
########################
# CHECKING FOR CORRELATION IN oyster metrics
prevalence$Shell_g <- as.numeric(prevalence$Shell_g)
prevalence$Tissue_g <- as.numeric(prevalence$Tissue_g)
prevalence$Thick <- as.numeric(prevalence$Thick)
prevalence$x <- as.numeric(prevalence$x)
prevalence$y <- as.numeric(prevalence$y)
prevalence$z <- as.numeric(prevalence$z)
prevalence.mat <- prevalence[, c(6,13:18)] # selecting the cols with
matrix <- cor(prevalence.mat, use="pairwise.complete.obs")
par(xpd = TRUE)
corrplot(matrix,method="number",type="lower",tl.col="black",tl.srt=45,mar=c(0,0,0,0))
#### CREATING SEASON
yq <- as.yearqtr(as.yearmon(prevalence$Date, "%m/%d/%Y") + 1/12)
prevalence$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Winter", "Summer", "Summer"))
prevalence <- prevalence %>% mutate(Date1 = Date)
prevalence$Date1 <- mdy(prevalence$Date1)
prevalence <- prevalence %>% separate(Date1, sep="-", into = c('Year','Month', 'Day'))
prevalence$Date <- mdy(prevalence$Date)
prevalence$Year <- as.numeric(prevalence$Year)
#### SCALING each column individually
###########################################################
prevalence$Lat_sc <- scale(prevalence$Lat, center = TRUE, scale = TRUE)
prevalence$Lng_sc <- scale(prevalence$Lng, center = TRUE, scale = TRUE)
prevalence$Shell_g_sc <- scale(prevalence$Shell_g, center = TRUE, scale = TRUE)
prevalence$Tissue_g_sc <- scale(prevalence$Tissue_g, center = TRUE, scale = TRUE)
prevalence$x_sc <- scale(prevalence$x, center = TRUE, scale = TRUE)
prevalence$y_sc <- scale(prevalence$y, center = TRUE, scale = TRUE)
prevalence$z_sc <- scale(prevalence$z, center = TRUE, scale = TRUE)
prevalence$Thick_sc <- scale(prevalence$Thick, center = TRUE, scale = TRUE)
prevalence$Date_sc <- scale(prevalence$Date, center = TRUE, scale = TRUE)
prevalence$Year_sc <- scale(prevalence$Year, center = TRUE, scale = TRUE)
## MODEL TESTING FOR PREVALENCE - ALL STATES
########################
model1 <- glmer(Infested ~ y + Culture + Ploidy + Season + Thick_sc + (1|Year_sc) + (1|State/Farm), family="binomial", data = prevalence)
summary(model1)
anova(model1) # figure out p-values (schisto analysis folder)
vif(model1)
anova(model1)$'Pr(>F)'
summary(Model)$coefficients[,"Pr(>|t|)"][2]
summary(model1)$coefficients[,"Pr(>|t|)"][2]
library(broom)
tidy(model1)
coefficients(model1)
summary(model1)$coefficients[,"Pr(>|t|)"][[2]]
model1$coefficients
tidy(model1)
glance(model1)
anova(model1)
car::Anova(model1, type=3)
model2 <- glmer(Infested ~ y_sc + Ploidy + Season*State + Culture*State + (1|Year_sc) + (1|Farm), family="binomial", data = prevalence)
summary(model2)
anova(model2)
vif(model2)
car::Anova(model2, type=3) # getting p-values
